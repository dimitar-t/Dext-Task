name: 'Terraform'

on:
  push:
    branches:
    - "main"
  pull_request:

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    
    env:
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

    defaults:
      run:
        shell: bash
        working-directory: terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -input=false

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      continue-on-error: true
      run: terraform plan -var db_username=$DB_USERNAME -var db_password=$DB_PASSWORD -input=false -no-color
      
    # Post tf plan output as a comment to the PR
    - name: Post Plan to GitHub PR
      if: github.event_name == 'pull_request'
      uses: mshick/add-pr-comment@v1
      with:
        allow-repeats: true
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        repo-token-user-login: 'github-actions[bot]'
        message: ${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}
         

    # On push to "main", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      id: apply
      if: github.event_name == 'push'
      run: terraform apply -var db_username=$DB_USERNAME -var db_password=$DB_PASSWORD -auto-approve -input=false
      
    - name: Post Apply to Github PR
      if: github.event_name == 'push'
      uses: mshick/add-pr-comment@v1
      with:
        allow-repeats: true
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        repo-token-user-login: 'github-actions[bot]'
        message: ${{ steps.apply.outputs.stdout || steps.apply.outputs.stderr }}
